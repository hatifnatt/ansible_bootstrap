---

- name: PVE Enterprise repo file is present
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/pve-enterprise.list
  register: pve_ent

- name: Disable PVE Enterprise repo
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/pve-enterprise.list
    backrefs: true
    regexp: '^(deb.*)'
    line: '# \1'
    state: present
  when: pve_ent.stat.exists

- name: Installing sudo package (apt)
  ansible.builtin.apt:
    name: sudo
    state: present
    update_cache: true
    # 1 week
    cache_valid_time: 604800
  when: ansible_os_family == 'Debian'

- name: Installing sudo package (yum)
  ansible.builtin.package:
    name: sudo
    state: present
    update_cache: true
  when: ansible_os_family == 'RedHat'

- name: Installing libselinux-python (yum)
  ansible.builtin.package:
    name: libselinux-python
    state: present
    update_cache: true
  when: ansible_os_family == 'RedHat'

- name: Creating user for Ansible
  ansible.builtin.user:
    name: "{{ username }}"
    password: '*'
    state: present
    shell: "/bin/bash"

- name: Check /etc/sudoers.d exists
  become: true
  ansible.builtin.file:
    path: /etc/sudoers.d
    state: directory
    owner: root
    group: root
    mode: "0750"

- name: Enable include of /etc/sudoers.d
  become: true
  ansible.builtin.lineinfile:
    name: /etc/sudoers
    regexp: "^#includedir"
    line: "#includedir /etc/sudoers.d"
    state: present

- name: Create config in sudoers.d
  become: true
  ansible.builtin.template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{ username | regex_replace('\\.', '_') }}"
    mode: "0440"
    validate: '/usr/sbin/visudo -cf %s'

- name: Set up 'authorized_keys'
  ansible.posix.authorized_key:
    user: "{{ username }}"
    key: "{{ lookup('file', item) }}"
    manage_dir: true
  with_first_found:
    - files: "{{ public_keys }}"
